https://ryanstutorials.net/bash-scripting-tutorial/

https://linuxconfig.org/bash-scripting-tutorial-for-beginners

https://www.shellscript.sh

Completed


Thanks to Aaron for pointing out that -a, -e (both meaning file exists), -S (file is a Socket), -nt (file is newer than), -ot (file is older than), -ef (paths refer to the same file) and -O (file is owned by the user running the test) are not available in the traditional Bourne shell (eg, /bin/sh on Solaris, AIX, HPUX, etc).

##break to quit the bloc
and
##exit to quit the main function

-----------------------------------
variables 
$0 .. $9 and $#.

-----------------------------------

-lt  
-gt  
-le  
-ge  
l=less
g=great
t=than
e=equal

the -lt, -gt, -le and -ge comparisons are only designed for integers, 

---------------------------------------------------------
test 
[ $X -ne 0 ] && echo "X isn't zero" || echo "X is zero"
[ -f $X ] && echo "X is a file" || echo "X is not a file"
[ -n $X ] && echo "X is of non-zero length" || \
echo "X is of zero length"

-n string is not null.
-z string is null, that is, has zero length

-ne not equal
-f a file
-n not empty|false
-nt 
-z

---------------------------------------------------------

#### echo 
------------------------------------------------------------
MYNAME=`grep "^${USER}:" /etc/passwd | cut -d: -f5`


echo -en "Please guess the magic number: "


if [ "`echo -n`" = "-n" ]; then
  n=""
  c="\c"
else
  n="-n"
  c=""
fi

echo $n Enter your name: $c
read name
echo "Hello, $name"

${myvar:-soloman} ==> check if available or display soloman
${myvar:=abooud} ==> check if available or overrid myvar with abooud

------------------------------------------------------------

#CASE :

case $INPUT_STRING in
	hello) 
	echo "Hello yourself!";;
	bye)
	echo "See you again!"
	break;;
	*)
	echo "Sorry, I don't understand";;
esac









-----------------------------------------------------------------
find dir nameoffile 
find / -name "*.html" -print 



-----------------------------------------------------------------
--tee
-----------------------------------------------------------------
-----------------------------------------------------------------
--awk
-----------------------------------------------------------------
-----------------------------------------------------------------
--sed
-----------------------------------------------------------------





 set –o noclobber -> to disable file overrid in bash
 echo “Overwriting the existing text in the file” >| testfile.txt
 set +o noclobber -> to enable it


Command	Description	Example
&	Run the previous command in the background	ls &
&&	Logical AND	if [ "$foo" -ge "0" ] && [ "$foo" -le "9"]
||	Logical OR	if [ "$foo" -lt "0" ] || [ "$foo" -gt "9" ]
^	Start of line	grep "^foo"
$	End of line	grep "foo$"
=	String equality (cf. -eq)	if [ "$foo" = "bar" ]
!	Logical NOT	if [ "$foo" != "bar" ]
$$	PID of current shell	echo "my PID = $$"
$!	PID of last background command	ls & echo "PID of ls = $!"
$?	exit status of last command	ls ; echo "ls returned code $?"
$0	Name of current command (as called)	echo "I am $0"
$1	Name of current command's first parameter	echo "My first argument is $1"
$9	Name of current command's ninth parameter	echo "My ninth argument is $9"
$@	All of current command's parameters (preserving whitespace and quoting)	echo "My arguments are $@"
$*	All of current command's parameters (not preserving whitespace and quoting)	echo "My arguments are $*"
-eq	Numeric Equality	if [ "$foo" -eq "9" ]
-ne	Numeric Inquality	if [ "$foo" -ne "9" ]
-lt	Less Than	if [ "$foo" -lt "9" ]
-le	Less Than or Equal	if [ "$foo" -le "9" ]
-gt	Greater Than	if [ "$foo" -gt "9" ]
-ge	Greater Than or Equal	if [ "$foo" -ge "9" ]
-z	String is zero length	if [ -z "$foo" ]
-n	String is not zero length	if [ -n "$foo" ]
-nt	Newer Than	if [ "$file1" -nt "$file2" ]
-d	Is a Directory	if [ -d /bin ]
-f	Is a File	if [ -f /bin/ls ]
-r	Is a readable file	if [ -r /bin/ls ]
-w	Is a writable file	if [ -w /bin/ls ]
-x	Is an executable file	if [ -x /bin/ls ]
( ... )	Function definition	function myfunc() { echo hello }





---------------to filter/reorder------------
This list includes a bunch of different commands that are useful to know when working with Linux. Not all of these commands are covered in the videos, so feel free to investigate them on your own.

Managing files and directories
cd directory: changes the current working directory to the specified one

pwd: prints the current working directory

ls: lists the contents of the current directory

ls directory: lists the contents of the received directory  

ls -l: lists the additional information for the contents of the directory  

ls -a: lists all files, including those hidden  

ls -la: applies both the -l and the -a flags  

mkdir directory: creates the directory with the received name

rmdir directory: deletes the directory with the received name (if empty)

cp old_name new_name: copies old_name into new_name

mv old_name new_name: moves old_name into new_name

touch file_name: creates an empty file or updates the modified time if it exists

chmod modifiers files: changes the permissions for the files according to the provided modifiers; we've seen +x to make the file executable

chown user files: changes the owner of the files to the given user

chgrp group files: changes the group of the files to the given group

Operating with the content of files
cat file: shows the content of the file through standard output

wc file: counts the amount of characters, words, and lines in the given file; can also count the same values of whatever it receives via stdin

file file: prints the type of the given file, as recognized by the operating system

head file: shows the first 10 lines of the given file

tail file: shows the last 10 lines of the given file

less file: scrolls through the contents of the given file (press "q" to quit)

sort file: sorts the lines of the file alphabetically

cut -dseparator -ffields file: for each line in the given file, splits the line according to the given separator and prints the given fields (starting from 1)

Additional commands
echo "message": prints the message to standard output

date: prints the current date

who: prints the list of users currently logged into the computer

man command: shows the manual page of the given command; manual pages contain a lot of information explaining how to use each command (press "q" to quit)

uptime: shows how long the computer has been running

free: shows the amount of unused memory on the current system  


Managing streams
These are the redirectors that we can use to take control of the streams of our programs

command > file: redirects standard output, overwrites file

command >> file: redirects standard output, appends to file

command < file: redirects standard input from file

command 2> file: redirects standard error to file

command1 | command2: connects the output of command1 to the input of command2

Operating with processes
These are some commands that are useful to know in Linux when interacting with processes. Not all of them are explained in videos, so feel free to investigate them on your own.

ps: lists the processes executing in the current terminal for the current user

ps ax: lists all processes currently executing for all users  

ps e: shows the environment for the processes listed  

kill PID: sends the SIGTERM signal to the process identified by PID

fg: causes a job that was stopped or in the background to return to the foreground

bg: causes a job that was stopped to go to the background

jobs: lists the jobs currently running or stopped

top: shows the processes currently using the most CPU time (press "q" to quit)  


